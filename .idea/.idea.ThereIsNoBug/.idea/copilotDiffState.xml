<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scipts/Panel/GamePanel.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scipts/Panel/GamePanel.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class GamePanel : BasePanel&#10;{&#10;    private List&lt;Image&gt; itemImages = new List&lt;Image&gt;(); &#10;    private Canvas canvas;&#10;    private Image DialogImg;&#10;    private Text SpeakText;&#10;    public GameObject aaaaaa;&#10;    protected override void Awake()&#10;    {&#10;        base.Awake();&#10;        SpeakText = GetControl&lt;Text&gt;(&quot;speak&quot;);&#10;        DialogImg = GetControl&lt;Image&gt;(&quot;DialogBox&quot;);&#10;        DialogImg.gameObject.SetActive(false);&#10;        #region 注释&#10;        // propBtn1drag = GetControl&lt;Image&gt;(&quot;PropBtn1&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn2drag = GetControl&lt;Image&gt;(&quot;PropBtn2&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn3drag = GetControl&lt;Image&gt;(&quot;PropBtn3&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn4drag = GetControl&lt;Image&gt;(&quot;PropBtn4&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn5drag = GetControl&lt;Image&gt;(&quot;PropBtn5&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn6drag = GetControl&lt;Image&gt;(&quot;PropBtn6&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        #endregion&#10;        //获取Canvas组件 方便后续使用&#10;        canvas = UIMgr.Instance().canvas.gameObject.GetComponent&lt;Canvas&gt;();&#10;        int i=0;&#10;        while (i &lt; 6)&#10;        {&#10;            itemImages.Add(GetControl&lt;Image&gt;(&quot;PropBtn&quot; + (i + 1)).gameObject.GetComponent&lt;Image&gt;());&#10;            i++;&#10;        }&#10;        &#10;    }&#10;    protected override void OnClick(string btnName)&#10;    {&#10;        base.OnClick(btnName);&#10;        switch (btnName)&#10;        {&#10;            case&quot;SettingBtn&quot;:&#10;                UIMgr.Instance().ShowPanel&lt;BasePanel&gt;(&quot;SettingPanel&quot;, E_UI_Layer.Top);&#10;                break;&#10;            case&quot;PropBtn1&quot;:&#10;                print(&quot;选择了0位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn2&quot;:&#10;                print(&quot;选择了1位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn3&quot;:&#10;                print(&quot;选择了2位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn4&quot;:&#10;                print(&quot;选择了3位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn5&quot;:&#10;                print(&quot;选择了4位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn6&quot;:&#10;                print(&quot;选择了5位置道具&quot;);&#10;                break;&#10;            // case&quot;启动对话框&quot;:&#10;            //     textImg.gameObject.SetActive(true);&#10;            //     break;&#10;            // case&quot;关闭对话框&quot;:&#10;            //     textImg.gameObject.SetActive(false);&#10;                break;&#10;            case&quot;玩小游戏&quot;:&#10;                UIMgr.Instance().ShowPanel&lt;BasePanel&gt;(&quot;LittleGamePanel&quot;, E_UI_Layer.Top);&#10;                break;&#10;            case&quot;RightBtn&quot;:&#10;                print(&quot;向右移动&quot;);&#10;                break;&#10;            case&quot;LeftBtn&quot;:&#10;                print(&quot;向左移动&quot;);&#10;                break;&#10;            case&quot;ForwardBtn&quot;:&#10;                print(&quot;向前移动&quot;);&#10;                break;&#10;            case&quot;BehindBtn&quot;:&#10;                print(&quot;向后移动&quot;);&#10;                break;&#10;            case &quot;对话框生成测试&quot;:&#10;                InitDialogBox(&quot;姑姑嘎嘎&quot;,aaaaaa.transform.position);&#10;                break;&#10;            case &quot;对话框关闭测试&quot;:&#10;                CloseDialogBox();&#10;                break;&#10;        }&#10;    }&#10;    public void GetItem(Item item)&#10;    {&#10;        int index = item.GetComponent&lt;InventoryComponent&gt;().index;&#10;        ChangeSprite(index, item);&#10;    }&#10;&#10;    public void ChangeSprite(int index,Item item)&#10;    {&#10;        &#10;        if (item.GetImagePath()!=null)&#10;        {&#10;            //TODO: 后续根据图集与否修改使用方法&#10;            itemImages[index].sprite =  ResMgr.Instance().Load&lt;Sprite&gt;(item.GetImagePath());&#10;            &#10;        }&#10;    }&#10;    public void RemoveItem(Item item)&#10;    {&#10;        int _index = item.GetComponent&lt;InventoryComponent&gt;().index;&#10;        itemImages[_index].sprite = null;&#10;    }&#10;/// &lt;summary&gt;&#10;/// 生成对话框&#10;/// &lt;/summary&gt;&#10;/// &lt;param name=&quot;speak&quot;&gt;&lt;/param&gt;&#10;/// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;&#10;    public void InitDialogBox(string speak, Vector3 pos)&#10;    {&#10;        if (canvas == null)&#10;        {&#10;            Debug.LogError(&quot;Canvas 为 null，无法生成对话框&quot;);&#10;            return;&#10;        }&#10;        if (DialogImg == null)&#10;        {&#10;            Debug.LogError(&quot;DialogImg 为 null，无法生成对话框&quot;);&#10;            return;&#10;        }&#10;        if (SpeakText == null)&#10;        {&#10;            Debug.LogWarning(&quot;SpeakText 为 null，文本不会显示&quot;);&#10;        }&#10;&#10;        RectTransform canvasRect = canvas.transform as RectTransform;&#10;        if (canvasRect == null)&#10;        {&#10;            Debug.LogError(&quot;canvas 的 RectTransform 未找到&quot;);&#10;            return;&#10;        }&#10;&#10;        // 世界坐标 -&gt; 屏幕坐标&#10;        Camera worldCam = Camera.main;&#10;        Vector2 screenPoint = RectTransformUtility.WorldToScreenPoint(worldCam, pos);&#10;&#10;        // 屏幕坐标 -&gt; Canvas 本地坐标（ScreenSpace-Overlay 时传 null camera）&#10;        RectTransformUtility.ScreenPointToLocalPointInRectangle(canvasRect, screenPoint, null, out Vector2 localPoint);&#10;&#10;        // 确保 DialogImg 是 Canvas 的直接子物体&#10;        RectTransform dialogRect = DialogImg.rectTransform;&#10;        if (dialogRect.parent != canvasRect)&#10;        {&#10;            dialogRect.SetParent(canvasRect, false);&#10;        }&#10;&#10;        DialogImg.gameObject.SetActive(true);&#10;        dialogRect.anchoredPosition = localPoint;&#10;        if (SpeakText != null) SpeakText.text = speak;&#10;    }&#10;    public void CloseDialogBox()&#10;    {&#10;        DialogImg.gameObject.SetActive(false);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;using UnityEngine.UI;&#10;&#10;public class GamePanel : BasePanel&#10;{&#10;    private List&lt;Image&gt; itemImages = new List&lt;Image&gt;(); &#10;    private Canvas canvas;&#10;    private Image DialogImg;&#10;    private Text SpeakText;&#10;    public GameObject aaaaaa;&#10;    protected override void Awake()&#10;    {&#10;        base.Awake();&#10;        SpeakText = GetControl&lt;Text&gt;(&quot;speak&quot;);&#10;        DialogImg = GetControl&lt;Image&gt;(&quot;DialogBox&quot;);&#10;        DialogImg.gameObject.SetActive(false);&#10;        #region 注释&#10;        // propBtn1drag = GetControl&lt;Image&gt;(&quot;PropBtn1&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn2drag = GetControl&lt;Image&gt;(&quot;PropBtn2&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn3drag = GetControl&lt;Image&gt;(&quot;PropBtn3&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn4drag = GetControl&lt;Image&gt;(&quot;PropBtn4&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn5drag = GetControl&lt;Image&gt;(&quot;PropBtn5&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        // propBtn6drag = GetControl&lt;Image&gt;(&quot;PropBtn6&quot;).gameObject.GetComponent&lt;UIDrag&gt;();&#10;        #endregion&#10;        //获取Canvas组件 方便后续使用&#10;        canvas = UIMgr.Instance().canvas.gameObject.GetComponent&lt;Canvas&gt;();&#10;        int i=0;&#10;        while (i &lt; 6)&#10;        {&#10;            itemImages.Add(GetControl&lt;Image&gt;(&quot;PropBtn&quot; + (i + 1)).gameObject.GetComponent&lt;Image&gt;());&#10;            i++;&#10;        }&#10;        &#10;    }&#10;    protected override void OnClick(string btnName)&#10;    {&#10;        base.OnClick(btnName);&#10;        switch (btnName)&#10;        {&#10;            case&quot;SettingBtn&quot;:&#10;                UIMgr.Instance().ShowPanel&lt;BasePanel&gt;(&quot;SettingPanel&quot;, E_UI_Layer.Top);&#10;                break;&#10;            case&quot;PropBtn1&quot;:&#10;                print(&quot;选择了0位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn2&quot;:&#10;                print(&quot;选择了1位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn3&quot;:&#10;                print(&quot;选择了2位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn4&quot;:&#10;                print(&quot;选择了3位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn5&quot;:&#10;                print(&quot;选择了4位置道具&quot;);&#10;                break;&#10;            case&quot;PropBtn6&quot;:&#10;                print(&quot;选择了5位置道具&quot;);&#10;                break;&#10;            // case&quot;启动对话框&quot;:&#10;            //     textImg.gameObject.SetActive(true);&#10;            //     break;&#10;            // case&quot;关闭对话框&quot;:&#10;            //     textImg.gameObject.SetActive(false);&#10;                break;&#10;            case&quot;玩小游戏&quot;:&#10;                UIMgr.Instance().ShowPanel&lt;BasePanel&gt;(&quot;LittleGamePanel&quot;, E_UI_Layer.Top);&#10;                break;&#10;            case&quot;RightBtn&quot;:&#10;                print(&quot;向右移动&quot;);&#10;                break;&#10;            case&quot;LeftBtn&quot;:&#10;                print(&quot;向左移动&quot;);&#10;                break;&#10;            case&quot;ForwardBtn&quot;:&#10;                print(&quot;向前移动&quot;);&#10;                break;&#10;            case&quot;BehindBtn&quot;:&#10;                print(&quot;向后移动&quot;);&#10;                break;&#10;            case &quot;对话框生成测试&quot;:&#10;                InitDialogBox(&quot;姑姑嘎嘎&quot;,aaaaaa.transform.position);&#10;                break;&#10;            case &quot;对话框关闭测试&quot;:&#10;                CloseDialogBox();&#10;                break;&#10;        }&#10;    }&#10;    public void GetItem(Item item)&#10;    {&#10;        int index = item.GetComponent&lt;InventoryComponent&gt;().index;&#10;        ChangeSprite(index, item);&#10;    }&#10;&#10;    public void ChangeSprite(int index,Item item)&#10;    {&#10;        &#10;        if (item.GetImagePath()!=null)&#10;        {&#10;            //TODO: 后续根据图集与否修改使用方法&#10;            itemImages[index].sprite =  ResMgr.Instance().Load&lt;Sprite&gt;(item.GetImagePath());&#10;            &#10;        }&#10;    }&#10;    public void RemoveItem(Item item)&#10;    {&#10;        int _index = item.GetComponent&lt;InventoryComponent&gt;().index;&#10;        itemImages[_index].sprite = null;&#10;    }&#10;/// &lt;summary&gt;&#10;/// 生成对话框&#10;/// &lt;/summary&gt;&#10;/// &lt;param name=&quot;speak&quot;&gt;&lt;/param&gt;&#10;/// &lt;param name=&quot;pos&quot;&gt;&lt;/param&gt;&#10;    public void InitDialogBox(string speak, Vector3 pos)&#10;    {&#10;        if (canvas == null)&#10;        {&#10;            Debug.LogError(&quot;Canvas 为 null，无法生成对话框&quot;);&#10;            return;&#10;        }&#10;        if (DialogImg == null)&#10;        {&#10;            Debug.LogError(&quot;DialogImg 为 null，无法生成对话框&quot;);&#10;            return;&#10;        }&#10;        if (SpeakText == null)&#10;        {&#10;            Debug.LogWarning(&quot;SpeakText 为 null，文本不会显示&quot;);&#10;        }&#10;&#10;        RectTransform canvasRect = canvas.transform as RectTransform;&#10;        if (canvasRect == null)&#10;        {&#10;            Debug.LogError(&quot;canvas 的 RectTransform 未找到&quot;);&#10;            return;&#10;        }&#10;&#10;        // 世界坐标 -&gt; 屏幕坐标&#10;        Camera worldCam = Camera.main;&#10;        Vector2 screenPoint = RectTransformUtility.WorldToScreenPoint(worldCam, pos);&#10;&#10;        // 屏幕坐标 -&gt; Canvas 本地坐标（ScreenSpace-Overlay 时传 null camera）&#10;        RectTransformUtility.ScreenPointToLocalPointInRectangle(canvasRect, screenPoint, null, out Vector2 localPoint);&#10;&#10;        // 确保 DialogImg 是 Canvas 的直接子物体&#10;        RectTransform dialogRect = DialogImg.rectTransform;&#10;        if (dialogRect.parent != canvasRect)&#10;        {&#10;            dialogRect.SetParent(canvasRect, false);&#10;        }&#10;&#10;        DialogImg.gameObject.SetActive(true);&#10;        dialogRect.anchoredPosition = localPoint;&#10;        if (SpeakText != null) SpeakText.text = speak;&#10;    }&#10;    public void CloseDialogBox()&#10;    {&#10;        DialogImg.gameObject.SetActive(false);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>